function [ fidelity ] = fidelity( X, Y )
%XX original
XX = im2double(X);
YY = im2double(Y);
XXg = (XX).^2.2*255;
YYg = (YY/255).^2.2*255;
XXG = padarray(XXg,[3 3]);
YYG = padarray(YYg,[3 3]);
[d1, d2] = size(XXG);
filterX = zeros(size(XXG));
for i= 4:d1-3
    for j = 4:d2-3
        filterX(i,j)=(exp(-9/2)*XXG(i-3,j-3)...
        +exp(-9/2)*XXG(i+3,j+3)...
        +exp(-9/2)*XXG(i-3,j+3)...
        +exp(-9/2)*XXG(i+3,j-3)...
        +exp(-13/4)*XXG(i-2,j-3)...
        +exp(-13/4)*XXG(i+2,j+3)...
        +exp(-13/4)*XXG(i+2,j-3)...
        +exp(-13/4)*XXG(i-2,j+3)...
        +exp(-13/4)*XXG(i-3,j-2)...
        +exp(-13/4)*XXG(i+3,j+2)...
        +exp(-13/4)*XXG(i-3,j+2)...
        +exp(-13/4)*XXG(i+3,j-2)...
        +exp(-5/2)*XXG(i+3,j+1)...
        +exp(-5/2)*XXG(i-3,j-1)...
        +exp(-5/2)*XXG(i+3,j-1)...
        +exp(-5/2)*XXG(i-3,j+1)...
        +exp(-5/2)*XXG(i+1,j+3)...
        +exp(-5/2)*XXG(i-1,j-3)...
        +exp(-5/2)*XXG(i+1,j-3)...
        +exp(-5/2)*XXG(i-1,j+3)...
        +exp(-9/4)*XXG(i+3,j)...
        +exp(-9/4)*XXG(i-3,j)...
        +exp(-9/4)*XXG(i,j-3)...
        +exp(-9/4)*XXG(i,j+3)...
        +exp(-2)*XXG(i+2,j+2)...
        +exp(-2)*XXG(i-2,j-2)...
        +exp(-2)*XXG(i+2,j-2)...
        +exp(-2)*XXG(i-2,j+2)...
        +exp(-5/4)*XXG(i+2,j+1)...
        +exp(-5/4)*XXG(i-2,j-1)...
        +exp(-5/4)*XXG(i+2,j-1)...
        +exp(-5/4)*XXG(i-2,j+1)...
        +exp(-5/4)*XXG(i+1,j+2)...
        +exp(-5/4)*XXG(i-1,j-2)...
        +exp(-5/4)*XXG(i+1,j-2)...
        +exp(-5/4)*XXG(i-1,j+2)...
        +exp(-1)*XXG(i+2,j)...
        +exp(-1)*XXG(i-2,j)...
        +exp(-1)*XXG(i,j+2)...
        +exp(-1)*XXG(i,j-2)...
        +exp(-1/2)*XXG(i+1,j+1)...
        +exp(-1/2)*XXG(i-1,j-1)...
        +exp(-1/2)*XXG(i+1,j-1)...
        +exp(-1/2)*XXG(i-1,j+1)...
        +exp(-1/4)*XXG(i+1,j)...
        +exp(-1/4)*XXG(i-1,j)...
        +exp(-1/4)*XXG(i,j+1)...
        +exp(-1/4)*XXG(i,j-1)...
        +XXG(i,j))/(exp(-9/2)*4+exp(-13/4)*8+exp(-5/2)*8+exp(-9/4)*4+exp(-2)*4....
        +exp(-5/4)*8+exp(-1)*4+exp(-1/2)*4+exp(-1/4)*4+1);
    end
end

filteredX=filterX(4:d1-3,4:d2-3);
filtered_X=(filteredX/255).^(1/3)*255;

for i= 4:d1-3
    for j = 4:d2-3
        filterY(i,j)=(exp(-9/2)*YYG(i-3,j-3)...
        +exp(-9/2)*YYG(i+3,j+3)...
        +exp(-9/2)*YYG(i-3,j+3)...
        +exp(-9/2)*YYG(i+3,j-3)...
        +exp(-13/4)*YYG(i-2,j-3)...
        +exp(-13/4)*YYG(i+2,j+3)...
        +exp(-13/4)*YYG(i+2,j-3)...
        +exp(-13/4)*YYG(i-2,j+3)...
        +exp(-13/4)*YYG(i-3,j-2)...
        +exp(-13/4)*YYG(i+3,j+2)...
        +exp(-13/4)*YYG(i-3,j+2)...
        +exp(-13/4)*YYG(i+3,j-2)...
        +exp(-5/2)*YYG(i+3,j+1)...
        +exp(-5/2)*YYG(i-3,j-1)...
        +exp(-5/2)*YYG(i+3,j-1)...
        +exp(-5/2)*YYG(i-3,j+1)...
        +exp(-5/2)*YYG(i+1,j+3)...
        +exp(-5/2)*YYG(i-1,j-3)...
        +exp(-5/2)*YYG(i+1,j-3)...
        +exp(-5/2)*YYG(i-1,j+3)...
        +exp(-9/4)*YYG(i+3,j)...
        +exp(-9/4)*YYG(i-3,j)...
        +exp(-9/4)*YYG(i,j-3)...
        +exp(-9/4)*YYG(i,j+3)...
        +exp(-2)*YYG(i+2,j+2)...
        +exp(-2)*YYG(i-2,j-2)...
        +exp(-2)*YYG(i+2,j-2)...
        +exp(-2)*YYG(i-2,j+2)...
        +exp(-5/4)*YYG(i+2,j+1)...
        +exp(-5/4)*YYG(i-2,j-1)...
        +exp(-5/4)*YYG(i+2,j-1)...
        +exp(-5/4)*YYG(i-2,j+1)...
        +exp(-5/4)*YYG(i+1,j+2)...
        +exp(-5/4)*YYG(i-1,j-2)...
        +exp(-5/4)*YYG(i+1,j-2)...
        +exp(-5/4)*YYG(i-1,j+2)...
        +exp(-1)*YYG(i+2,j)...
        +exp(-1)*YYG(i-2,j)...
        +exp(-1)*YYG(i,j+2)...
        +exp(-1)*YYG(i,j-2)...
        +exp(-1/2)*YYG(i+1,j+1)...
        +exp(-1/2)*YYG(i-1,j-1)...
        +exp(-1/2)*YYG(i+1,j-1)...
        +exp(-1/2)*YYG(i-1,j+1)...
        +exp(-1/4)*YYG(i+1,j)...
        +exp(-1/4)*YYG(i-1,j)...
        +exp(-1/4)*YYG(i,j+1)...
        +exp(-1/4)*YYG(i,j-1)...
        +YYG(i,j))/(exp(-9/2)*4+exp(-13/4)*8+exp(-5/2)*8+exp(-9/4)*4+exp(-2)*4....
        +exp(-5/4)*8+exp(-1)*4+exp(-1/2)*4+exp(-1/4)*4+1);
    end
end
filteredY=filterY(4:d1-3,4:d2-3);
filtered_Y=(filteredY/255).^(1/3)*255;
fidelity = sqrt((sum(sum((filtered_X-filtered_Y).^2,1),2))/256/384);
end

